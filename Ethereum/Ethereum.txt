Ethereum Fundamentals
    1. What is Ethereum?
        a. History
            - October 31, 2008 - Bitcoin Whitepaper by Satoshi Nakamoto
            - December 2013 - Ethereum Whitepape by Vitalik Buterin
            - July 30th, 2015 - Ethereum goes online
        b. Smart Contract
            - Code that lives in the Ethereum Blockchain
            - Can be communicated with using messages
            - Allows for the creation of advanced systems
        c. Ethereum Network
            - Used to transfer money and store data
            - Many different types of networks
            - Formed by one or more nodes
            - Each node is a machine running an ethereum client
            - Anyone can run a node
            - Each node can contain a full copy of the blockchain
            - Blockchain is a ledger that stores a record of every transaction that has ever taken place
        d. Connecting to the networks
            - Developer tecnology to create applications, web3.js
            - Consumer technology, Metamask and Mist Browser
        e. Metamask Chrome Extension
            - How to connect to Ethereum networks
            - Ethereum Wallet
            - Networks, access with single account
                - Main, Ropsten, Kovan, Rinkeby Tests 
            - Account
                - Account Address, unique identifier
                - Public Key, used for transactions
                - Private Key, used for transactions
        f. Order of Operations
            - Click on Submit w/ address
            - Address sent to BE Server
            - BE Server uses Web3 library to create a transaction object
            - BE Server sent transaction object to the network
                - Specific node, block is created, mining occurs
            - BE Server waited for transaction to be confirmed
            - BE Server sent success message back to browser
        g. Transaction Object
            - Nonce, how many times the sender has sent a transaction
            - To, address of receiving account
            - Value, amount of ether
            - gasPrice, amount of ether to pay per unit gas
            - startGas/gasLimit, units of gas this transaction can consume
            - V/R/S, cryptographic pieces of data used to generate senders account address. Generated from sender's private key
        h. Basic Blockchains
            - SHA256 Hash, crytographic identifier
            - Block
                - Number
                - Nonce, number used to try to figure out target hash
                - Data
                - Hash
                - Transaction List
                - Coinbase transaction, reward for mining, UTXO
            - Blockchain
                - Series of blocks, connected through previous hash value
            - Block Time, time to find a solution, around 10 minutes and difficulty increases to maintain average
            - Ethereum network Block Time = 15 seconds
        k. External Account
            - An account an entity owns
    2. How do we interact with Ethereum?
        a. Smart Contract
            - An account controlled by code
            - Field, description
            - Balance, amount of ether this account owns
            - Storage, data storage for this contract
            - Code, raw machine code for this contract
            - Contract accounts are specific to one network
            - Contract Source Code deployed as instances on network
        b. Solidity
            - Written in .sol files
            - Strongly typed
            - Similar to JavaScritp
            - Gotchas
                - Whenever you define a storage variable as public, a function with that variable name will be created that returns that variable value
                - All transactions take time to process
                - Transactions always return transaction hash
                - Transaction to a function costs money
                - Transactions take time to be mined and validated
            - Contract Definition -> Solidity Compiler -> Byte Code / Application Binary Interface
            - Common Function Types
                - Public, Anyone can call this function
                - Private, Only this contract can call this function
                - View, Function returns data and does not modify contract's data, use RETURNS
                - Constant, Function returns data and does not modify contract's data, use RETURNS
                - Pure Function will not modify or even read the contract's data
                - Payable, When someone calls this function, they might send ether along
            - Common Types
                - String, sequence of character
                - bool, true or false
                - int, integer positive or negative, no decimal
                    - int8, int16, int32, ..., int 256
                - uint, unsigned integer, positive number, no decimal
                    - uint8, uint16, uint32, ..., uint256
                - fixed/ufixed, fixed point number, with a decimal
                - address, methods tied to it for sending money 
            - Contract Deployment
                - External Account to Create Contract Transaction
                    - Nonce
                    - To, NOTHING/BLANK = Contract
                    - Data, compiled bytecode of the contract
                    - Value, amount of wei to send to the target address
                    - gasPrice, amount of wei the sender is willing to pay per unit gas
                    - startGas/gasLimit, units of gas that this transaction can consume
                    - V/R/S, cryptographic pieces of data used to generate sender's account address
                - Contract Source -> Compiler -> ABI / Contract Bytecode -> Rinkeby
            - To Change anyting on the Blockchain = Submit a Transaction -> Mining POW
            - Running Contract Functions
                - Calling a Function
                    - Cannot modify the contract's data
                    - Can return data
                    - Returns instantly with no cost
                - Sending a Transaction to a Function
                    - Can modify a contract's data
                    - Takes time to execute
                    - Returns the transaction hash
                    - Costs money
        c. Remix.ethereum.org
            - Solidity IDE
            - Remix Editor w/Contract Source -> Compile to Byte -> In-Browser Fake Network
            - Environment, JavaScript VM
            - Account, Automatic Accounts w/ 100 ether
            - Gas Limit,
            - Value, 
            - Contract to Deploy
            - Deployed Contracts
        d. Wei vs. Ether
            - 1 Ether = 1,000,000,000,000,000,000 Wei
        e. Gas and Transactions
            - Meant to measure how much work is being done by executed code
            - gasPrice
                - amount of wei the sender is willing to pay per unit gas to get this transaction processed
            - startGas/gasLimit
                - Units of gas that this transaction can consume
            - if gas used > startGas/gasLimit then execution halts
        f. Mnemonic Phrases
            - Twelve Word Mnemonic -> BIP39 Mnemonic Algorithm -> Series of Accounts
    3. Smart Contracts with Solidity
        a. Truffle
            - Contract Creation -> Local Testing -> Deployment
            - Issues...  
        b. Custom Node Project
            - Contract Creation -> Local Testing -> Deployment
        c. Boilerplate Requirements
            - Issue - Able to write Solidity that is then accesssed by JavaScript
                - Solution - Set up the Solidity Compiler
            - Issue - Need a way to rapidly test contracts without doing the manual testing
                - Solution - Set up a custom Mocha test runner that can test Solidity code
            - Issue - Need some way to deploy our contract to public networks
                - Solution - Set up a deploy script to compile and deploy our contract
        d. Necesary Resources
            - npm install --save solc
            - npm install --save ganache-cli
            - npm install --save mocha
            - npm install --save web3@1.0.0-beta.35
                - Web3 Versioning
                    - v0.x.x = Primitive interface, only callbacks for async-code
                    - v1.x.x = Support for promises + async/await
            - Infura API
            - npm install --save truffle-hdwallet-provider
        e. Compiling
            - Returns object with contracts property with contract objects
            - Each contract object has:
                - Bytecode property that will be deployed
                - Interface, contract ABI that lists all functions, arguments, and return values
        f. Testing
            - Solitiy Compiler -> Bytecode -> Deploy Local Test Network -> Test Contract
            - Mocha, describe, it, beforeEach
            - Order
                - Mocha Starts
                - beforeEach = Deploy a new contract instance, created through a transaction from external account
                - Manipulate the contract
                - Make an assertion about the contract
        g. Web3
            - Constructor creates instance
            - Set up Provider, communication layer between Web3 and some network
            - Most methods are asynchronous in nature
            - Commands
                - web3.eth.getAccounts(), returns list of accounts
                - new web3.eth.Contract(JSON.parse(interface)), creates a new contract
                - .deploy({ data: bytecode, arguments: [Initial Values]}), deploys bytecode with arguments
                - .send({ from: accounts[0],gas: Value}), sends out a transaction that creates this contract
            - Deployment
                - Create a contract with an interface -> deploy with bytecode and initial information ->send from account with gas
            - Contract Access
                - Use interace -> create transaction to address
            - Deployed Contract
                - Object of type Contract
                - Provider = Communication Layer
                - Request Manager, facilitates communication
                - Providers, WebSockets, HTTP, or Inter Process Communication
                - Methods, contract methods to interact with
                    - contract.methods.method(parameters).call()
                    - contract.methods.method(parameters).send()
                - Options, information about contract like address, interface, data, from, gasPrice, and gas 
        h. Infura
            - Web3 Instance -> Provider w/ Account w/ Ether (Accout Mnemonic) -> Infura Node/Portal to Rinkeby
            - Create Account -> Create a Project -> Get API Endpoint
        i. Truffle HD Wallet
            - Provider to connect to Infura
            - const provider = new HDWalletProvider(mnemonic, networkURL)
        j. Deployed Contracts on Remix
            - Environment = Injected Web3 w/ Wallet Account
            - At Address = Contract Address
    4. Tooling, Deployment, Testing of Apps with Ethereum
        a. Inbox Contract
            - Variables
                - Message, example storage variable
            - Functions
                - Default getter for message
                - setMessage, sets message on contract
        b. Lottery Contract
            - Variables
                - Manager, address of person who created the contract
                - Players, array of addresses of people who entered
            - Functions
                - Enter, enters a playeer into the Lottery
                - pickWInner, Randomly picks a winner and sends them the prize pool
    5. Building a multi-page app with Ethereum
    6. Resources
        a. etherscan.io/chart/blocktime
        b. remix.ethereum.org
        c. etherconverter.online
        d. iancoleman.io/bip39
        e. rinkeby-faucet.com
        f. faucet.rinkeby.io
        g. truffleframework.com/
        h. www.npmjs.com/package/solc
        i. www.npmjs.com/package/ganache-cli
        j. web3js.readthedocs.io/en/1.0/
        k. infura.io/docs
        l. rinkeby.etherscan.io