NFT Marketplace Insights

    1. Polygon
        - Ethereum scalability solution, faster processing, cheaper transactions

    2. Project Dependencies
        - node.js/npm - package managers
        - npx - Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run
        - truffle - Truffle is a development environment, testing framework and asset pipeline for Ethereum, aiming to make life as an Ethereum developer easier. With Truffle, you get:
        - @truffle/hdwallet-provider - HD Wallet-enabled Web3 provider
        - @openzeppelin/contracts - library for secure smart contract development
        - ethers - A complete Ethereum wallet implementation and utilities in JavaScript (and TypeScript)
        - axios
        - chai, chai-as-promised
        - ipfs-http-client - A client library for the IPFS HTTP RPC API (/api/v0/*), implemented in JavaScript
        - web3
        - web3modal
        - tailwindcsss, postcss
        - autoprefixer

    3. Project Setup
        - Setup Mumbai-Testnet - https://docs.polygon.technology/docs/develop/network-details/network/
            - Setup Node on MaticVigil for Public RPC
            - Add Matic Mumbai to Truffle Config Networks - get URL from MaticVigil
        - Configure Matic Main Network
            - Add Matic Maain Network to Truffle Config Networks - get URL from MaticVigil
        - Solidity Compiler Setttings
            - Version 0.8.3
            - Uncomment Settings

    4. Create NFT Token Contract - contracts/NFT.sol

    5. Create NFT Marketplace Contract - contracts/Market.sol

    6. Writing Test Cases
        - Run Tests
            - Make Sure Ganache is Running
            - sudo truffle compile
            - sudo truffle test

    7. Migrating Contracts on Development and Mumbai Test Network
        - truffle migrate - deploys to ganache as development
    
    8. Building Client Side Application Part One
        - Address - where contracts are deployed
        - ABI - interface for contracts, json format
        - Ethers - use utils to format units, 
        - Web3 - create web3 instance to get blockchain network information, create instance of contract, call methods on contract
            - tokenContract.methods.tokenURI(tokenID).call() to get tokenURI
            - Use axios to make a request to that URL for the token meta information
        - Web3Modal - looks for a web3 provider being injected into the browser and connects with it
    
    9. Building Client Side Application Part Two
        - IPFS - decentralized server to save files
        - How to create NFT and save on IPFS*
    
    10. Creating User Dashboard for NFT Marketplace Application
        - How to Load a User's Assets

    11.Deployment on Polygon Mumbai Network
        - Configure in Truffle Config Networks
        - truffle migrate --network maticmumbai - to compile and migrate to mumbai
        - Update ETH to MATIC to display correct currency
        - 