1. Structuring Your Smart Contract
    - Smart Contract
        - Adhere to Open Zeppelin ERC 721
    - Create ERC721 Contact
        - baseTokenURI - map tokenId to some metadata off-chain
    - Opensea Whitelisting
        - ERC721Tradable and ERC1155Tradable contracts whitelist the proxy accounts of OpenSea users so they are automatically able to trade any item on OpenSea
        - On OpeanSea, each user has a proxy account that they control and is ultimately called by the marketplace contracts to trade their items
    - Using Ownable - IMPORTANT
        - Provides basic access control mechanisms, establishes concept of a contract owner, who can be granted exclusive access to certain function within the contract
    - Deploying the Contract
        - Alchemy - Blockchain developer platform
        - Deploy with truffle deploy
    - Minting Your Tokens
        - Get contract address on Rinkeby from truffle deploy output command
        - Run node scripts/mint.js

2. Adding Metadata
    - baseTokenURI(), should return URI of metadata
    - Deploy contract, mint NFTs

3. Viewing Your Items on OpeanSea
    - Opensea Test Environment - testnets.opeansea.io - RINKEBY
    - URL - https://testnets.opensea.io/assets/<asset_contract_address>/<token_id>
    - URL - Update Item - https://testnets-api.opensea.io/api/v1/asset/<your_contract_address>/<token_id>/?force_update=true

4. Debugging Your Metadata
    - URL - Validate - https://testnets-api.opensea.io/asset/<your_contract_address>/<your_token_id>/validate/ 

5. Create Your Collection
    - Opensea Collection Creator - populate all of your assets on OpenSea and give you a dedicated page

6. Auctioning an Item
    - Go to item and select sale
    - Select make offer to bid
    - You can sell a bundle
    - You can run an eBay style auction
    - You can sell items in tokens other than ETH

7. Launching on Mainnet
    - ENV network = mainnet
    - truffle --network live

8. Customizing Your Collection
    - Must have token as OWNABLE

9. Running an Initial Item Sale
    - Option 1: Simple Item Sale
        - Initial Item Offering - Mint into an account, sell them off using standard auction flow, show up in OpenSea feed
    - Option 2: Custom Sale Contract
        - Opensea Crowdsale Tutorial: https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial
            - Actions - sell packs, airdrop rewards, tradeable loot boxes

10. Setting Fees on Secondary Sales
    - Setting Fee - in collection, adjust percentage fee field under royalty section and include a payout address
    - Receiving Revenue - distributed in bulk once a month to the payment address specified

11. Embedding Collection in Your Own Site
    - Embed Instructions - https://docs.opensea.io/docs/embeds

12. Sample Project
    - Setting Up
        - Dependencies - package.json
        - Run Hardhat - npx hardhat
            - Create an empty hardhat.config.js
            - hardhat.config.js - config file where we can define our blockchain configureation variables such as network and accounts
        - Obtain Alchemy API Key 
        - Update hardhat.config.js
        - Compile smart contract - npx hardhat compile
        - Create deploy script - scripts/old_deploy.js
        - Deploy smart contract to testnetwork - npx hardhat run scripts/old_deploy.js --network rinkeby
        - Deploy smart contract to mainnet - npx hardhat run scripts/old_deploy.js --network ethereum
    - Minting
        - Hardhat Tasks - https://hardhat.org/guides/create-task.html
        - Update deploy.js to use tasks
        - Import task file into hardhat.config.js so it is picked up
        - Add helpers to helpers.js
        - Run tasks using Hardhat CLI
            - npx hardhat <task> <arguments>
        - Add Minting Task - mint.js
        - Add helper to get contract - helpers.js
        - Import task file into hardhat.config.js so it is picked up
    - Adding Metadata and Payments
        - Having a setBaseTokenURI() - allows you to update the metadata as you see fit
        - IPFS CAR - Content Addressable aRchives
            - Pack image into IPFS CAR - npx ipfs-car --pack images --output images.car
        - NFT Storage Files
            - Upload Car to IPFS using NFT Storage Files
        - Create Metadata - simple JSON object - metadata/1
            - Create CAR of metadata
                - npx ipfs-car --pack metadata --output metadata.car
            - Upload Car to IPFS using NFT Storage Files
        - Add MetaData Update Task to Hardhat - mint.js
        - Run Update
            - npx hardhat compile
            - npx hardhat deploy
            - . .env
            - npx hardhat set-base-token-uri --base-url "https://bafybeif6iuokmmcuwj7jgscybx3gvlcwkb6ybspwcduivl7mbqmgmmxubi.ipfs.dweb.link/metadata/"
            - npx hardhat mint --address 0xb43a1a6Ec7296399A616799dDA782a1112EA24fA
            - npx hardhat token-uri --token-id 1
    - Verifying on Etherscan
        - Import hardhat-etherscan inside hardhat config file
        - Sign up for Etherscan
        - Create an API Key
        - Add API Key to .env file
    - Setting a Token Supply Limit
        - Add require in mintTo that checks against a total supply counter
    - Setting a Price for Minting NFT
        - Add MINT_PRICE
        - Require msg.value to be MINT_PRICE inside payable mintTo
    - Withdrawing Funds
        - Use OpenZeppelin PullPayment solution
            - Import and inherit
            - Now contract has withdrawPayments(payee) function
    - Roles and Access
        - Ownable
            - onlyOwner modifier - only th eowner will be able to call the function
            - renounceOwnership(), transferOwnership(), isOwner()

13. Run Limited NFT
    - Add LimitNFT.sol contract with overridden functions - contracts/LimitedNFT.sol
        - Overriding ERC721 - https://docs.openzeppelin.com/contracts/3.x/extending-contracts
    - Compile updated smart contract - npx hardhat compile
    - Update deploy.js with task to deploy LimitedNFT smart contract - scripts/deploy.js
    - Deploy LimitedNFT smart contract - npx hardhat deploy-limited
    - Update contract address in .env
    - Update mint.js with tasks to set token uri, mint, and retrieve token uri for LimitedNFT - mint.js
    - Set base token uri for LimitedNFT - npx hardhat set-base-token-uri-limited --base-url "https://bafybeic42autrenkz3etcbhonbpxtso75p5ygjwsugixhi5xzvnlbfputq.ipfs.dweb.link/metadata/"
    - Mint LimitedNFT - npx hardhat mint-limited --address 0xb43a1a6Ec7296399A616799dDA782a1112EA24fA
    - Obtain token URI for LimitedNFT - npx hardhat-limited token-uri --token-id 1