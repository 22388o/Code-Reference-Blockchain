Hyperledger Fabric Documentation
    1. Enterprise Requirements
        a. Identifiable Participants
        b. Permissioned Networks
        c. High Transaction Throughput Performance
        d. Low Latency of Transaction Confirmation
        e. Privacy and Confidentiality of Business Transactions and Data 
    2. Idea
        a. Enterprise grade permissioned distributed ledger technology platform
        b. Open Governance
        c. Modular and Configurable
            - Pluggable ordering service
            - Pluggable membership service provider
            - Peer-To-Peer gossip service
            - Smart Contract
            - Ledger configuration
            - Endorsment and validation policies
        d. Smart Contracts with Go, Java, and Node
            - Order Execute
                - Validates and orders transactions and then propogates them to all peer nodes
                - each peer then executes the transaction sequentially
            - Execute Order Validate
                -  Exceute a transaction and check its correctness, thereby endorsing it
                - Order transactions via a pluggable consensus protocol
                - Validate transactions against an application specific endorsement policy before committing them to the ledger
        e. Permissioned
            - Permissionless = Anyone
            - Permissioned = Limited
        f. Pluggable Consensus Protocols
        g. Performance
    3. Model
        a. Assets
          - Key:Value Pairs
          - Binary or JSON form
        b. Chaincode
          - Software defining an asset or assets and the transaction instructions for modifying the assets
          - Functions execute against the ledger's current state database
        c. Ledger Features
          - Sequenced, tamper resistant record of all state transitions in the fabric
        d. Privacy
          - Separate channel to isolate and segregate transactions and ledger
          - Private data collection can segregate data in a private database, separate from the channel ledger
        e. Security & Membership Services
          - Public Key Infrastructure used to generate cryptographic certificates
        f. Consensus
          - Could be a specific algorithm, within a single function, like cryptographic hashing
          - In Hyperledger Fabric, consensus is achieved as a byproduct of the ongoing verification taking place during a transaction's journey from proposal to commitment
        g. Channels
           - Provide a mechanism for private communications and private data between the members of a consortium
        h. Peer Nodes
            - Network components where copies of the blockchain ledger are hosted
            - An X.509 certificate was issued by the Certificate Authority which associates P1 with organiztion R1.
            - The Peer can join channel using the Orderer, which uses the channel configuration to determine the peers permissions on this channel
         i. Smart Contract
            - Client can use smart contract to access ledger via the peer node
            - Provides a well defined set of ways by which the ledger can be queried and updated
            - First, a contract implementation has to be installed on a peer node
                - Peer node can see the implementation logic of S5
            - ONCE: Second, the smart contract interface has to be instantiated on the channel using the peer node
         j. Endorsement Policy
            - An endorsement policy is supplied at the time of instantiation of the chain code
            - It describes which organization must approve transactions before they will be accepted by other organizations onto their copy of the ledger
         k. Invoking a Smart Contract
            - Once it is installed on a Peer node and instantiated in the Channel, the chain code can be invoked by a client application
            - Invocation is done through client applications sending proposals to peers owned by the organizations specific by the smart contract endorsment policy
            - Transaction proposal serves as input to the smart contract, which generates an endoresed transaction response, which is returned by the peer node to the client application
            - Transaction response plus transaction proposal form a fully endorsed transaction 
         l. Types of Peers
            - REQUIRED: Committing Peer, every peer node, receives blocks of transaction which are subsequently validated before they are committed to the peer node's copy of the ledger as an append operation
            - REQUIRED: Endorsing Peer, every peer with a smart contract can be an endorsing peer. The smart contract on the peer must be used by a client application to generate a digitally signed transaction response.
                - Endorsement policy identifies the organizations whose peers should be endorsers
             - REQUIRED: Leader Peer, takes responsibility for distributing transactions from the Orderer to the other committing peers
             - Anchor Peer, Cross organization communication point
         m. Configurations
            - Network
                - Governs orderer behavior and permits organization to manage network resources
            - Channel
                - Governs access to the channel resources, read or write authority, etc
            - Updating
                - Adminstrator must submit a configuration transaction to change the network or channel configuration
                - Mod_Policy
         n. Ordering Service
            - Channel Level
                - Gathers endorsed applications from transactions and orders them into transaction blocks
            - Network Level
                - Management point for network resources according to the policies defined in network configuration
          o. Policy Change
            - Modification Policy
                - First class policy within a network or channel configuration that manages change
    4. Blockchain Network
        a. What is a blockchain network?
            - Technical infrastructure that provides ledger and smart contract (chaincode) services to applications
            - Smart contracts used to generate transactions which are subsequentlly distributed to every peer node in the network where they are immutably recorded on their copy of the ledger 
            - Multiple organizations come together as a consortium to form the network and their permissions are determined by a set of policies that are agreed by the consortium when the network is originally configured
    5. Identity
        a. What is an Identity?
            - Actors include peers, orderers, client applications, adminstrators, and more
            - Each actor has a digital identity encapsulatd in an X.509 digital certificate
            - These identities determine the exact permissions over resources and access to information that actors have in a blockchain network
            - Principal, union of an identity and the associated attributes
                - Attributes include organization, unit, role, identity
              - Verifiable, must come from a trusted authority
              - MSP defines the rules that govern valid identities for this organization
        b. What are PKIs?
            - Public Key Infrastructure, collection of internet technologies that provide secure communications in a network
            - Comprised of CAs that issue digital certificates to parties, who then use them to authenticate
            - Digital Certificates
                - Document that holds a set of cryptographic attributes relating to the holder of the certificate
            - Public and Private Keys
                - Public Key, acts as authentication anchor
                - Private Key, used to produce digital signatures on messages
            - Certificate Authorities
                - Dispense digitally signed certificates to different actors
                - Can verify actor is bound to the public key in the certificate through validatings the CA's signature
                - Root and Intermediate CAs
                - Fabric CA - Root CA manages X.509 certificates
            - Certificate Revocation Lists
                - list of references to certificates a CA knows to be revoked
     6. Membership
        a. Membership Service Provider
            - Identifies which Root CAs and Intermediate CAs are trusted to define the members of a trsut domain e.g. an organization
            - Identity roles an actor may play
            - Basis for defining access privileges in the context of a network and channel e.g. channel admins, readers, writers
            - Structure
                - Org - MSP - Members
                - Org - Multiple MSPs by Channel - Members
        b. Local and Channel MSPs
            - Channel MSPs, channel
            - Local MSPs, defined for clients, peers, and orderers
        c. Types of MSP
            - Network, defines who are the members in the network
            - Channel, defines who has the ability to particiapte in certain action on the channel
            - Peer, defines who has the ability to perform certain actions on the Peer
            - Orderer, defines the actors or nodes it trusts
        d. MSP Structure (Subfolders)
            - Root CAs, self-signed X.509 certificates of the Root CAs trusted by the org
            - Intermediate CAs, Root signed X.509 certificates of the Intermediate CAs trusted by the org
            - Organizational Units, 
            - Adminstrators, define the actors who have the role of administrators for this org
            - Revoked Certificates, Subject Key Identifiers and Authority Access Identifiers associated with revoked certificates
            - Node Identity, cryptographic material allowing the node to authenticate itself in the messages it sends to other participants of its channels and networks
            - KeyStore for Private Key, contains node's signing key
            - TLS Root CA, certificates for TLS communication
            - TLS Intermediate CA, certificates for TLS communication
     7. Peers
        a. Ledger and Chaincode
            - Peer hosts instances of both
            - Applications and Adminstrators must interact with a peer to access these resources
            - Can host multiple ledgers and smart contracts
        b. Applications and Peers
            - Order
                - Connect to Peer
                - Invoke Chaincode
                    - Peer invokes chaincode with propsal
                    - Chaincode generates query or update proposal response
                - Proposal Response (Done if query...), (Must go through consensus if transaction)
                - Request transaction is ordered
                    - Transaction sent to peers in blocks
                    - Peer updates ledger using transaction blocks
                - Ledger update event
         c. Peers and Channels
            - Channels allow a specific set of peers and applications to communicate with eachother within a network
         d. Peers and Organizations
            - Multiple peers from various organizations come together in a channel to form the network
         e. Peers and Identity
            - A policy in the channel configuration uses the peer's identity to determine it's rights
            - Membership Service Provider determines how a peer gets assigned to a specific role in a particular ogranzation and accordingly gains appropriate access to blockchain resources
         f. Peers and Orderers
            - During update transactions, a peer requires other peers in the network to approve a ledger update before it can be applied, this is called consensus
            - Process (Consensus)
                - Phase 1
                    - Application generates a transaction proposal which they send to each of the required set of peers for endorsement
                    - Endorsing pers execute chaincode using the transaction proposal and generate a transaction proposal response. 
                    - These peers are determined by the endorsement policy defined for a chaincode
                    - A peer endorses a resonse by adding its digital signature and signing the entire payload using its private key
                    - Endorsed responses are returned to application
                - Phase 2
                    - Orderer receives transaction and orders them into blocks
                - Phase 3
                    - Orderer sends blocks to peers, which can be cascaded to other peers using the gossip protocol
                    - Peers validates every transaction in a block according to the endorsement policy of the chaincode which generated the transaction
                    - Peer then udpates the transaction ledger
                    - Peer also generates an event
                        - Block event contains full block content
                        - Block transaction event includes summary information only
                        - Chaincode events can also be published at this time
     8. Smart Contract and Chaincode
        a. Smart Contract
            - Defines the rules between organizations in executable code
            - Invoked to generate transaction that are recorded on the ledger
        b. Terminology
            - Smart contract defines the transaction logic
            - Chaincode governs how smart contracts are packaged for deployment
        c. Ledger
            - Blockchain, immutable history of all transactions
            - State database, definind current state of all assets
        d. Development
            - Using Node, Go, or Java
        e. Endorsement
            - Endorsement Policy, indicates which organizations in a blockchain network must sign a transaction generated by a given smart contract in order for that transaction to be declared valid
            - All transactions, whether valid or invalid, are added to a distributed ledger, but only valid transactions update the world state
        f. Channels
            - Administrator defines an endorsement policy for a chaincode when it is instantiated on a channel, and can change it when the chaincode is updated
        g. Intercommunication
            - Smart contracts are able to call to other smart contracts both within the same channel and across different channels
        h. System chaincodes
            - LSC - Lifecycle System Chaincode, runs in all peers to handle package signing, install, instantiate, and upgrade chaincode requests
            - CSCC - Configuration System Chaincode, runs in all peers to handle changes to a channel configuration
            - QSCC - Query System Chaincode, runs in all peers to provide ledger APIs which include block query, transaction query, etc.
            - ESCC - Endorsement System Chaincode, runs in endorsing peers to cryptographically sign a transaction response
            - VSCC - Validation System Chaincode, validates a transaction, including checking endorsement policy and read-write set versioning
     9. Ledger
        a. What is a Ledger?
            - State, current state of assets
            - Transaction log, ordered list of transactions that derive state
        b. Ledgers, Facts, and States
            - Ledger doesnt store the object, but rather facts about objects
        c. The Ledger
            - World State, a database that holds a cache of the current values of a set of ledger states
            - Blockchain, a transaction log that records all the changes that have resulted in the current world state
        d. World State
            - Implemented as a NoSQL database
            - Version is incremented every time there is a state change
        e. Blockchain
            - Transaction log
            - Each block includes a hash of the block's transactions as well as a copy of the hash of the prior block's header
            - Implemented as a file
        f. Blocks
            - Block Header
                - Block number, an integer starting at 0 and incremented by 1 for every new block appended to the blockchain
                - Current Block Hash, the hash of all the transactions contained in the current block
                - Previous Block Hash, a copy of the has from the previous block in the blockchain
            - Block Data
                - List of transactions arranged in order
            - Block Metadata
                - Time when block was written as well as certificate, public key, and signature of block writer
        g. Transactions
            - Transaction captures changes to the world state
            - Header, captures essential metadata about the transaction
            - Signature, cryptographic signature, created by the client application
            - Proposal, encodes the input parameters supplied by an application to the smart contract which creates the proposed ledger update
            - Response, captures before and after values of the world state as a Read Write set
            - Endorsements, list of signed transaction responses from each required organization to satisfy the endorsment policy
        h. World State Database Options
            - LevelDB or CouchDB
     10. The Ordering Service
        a. What is Ordering?
            - Handles transaction ordering, and along with other nodes forms an ordering service
        b. Orderer Nodes and Channel Configuration
            - Orderers also maintain the list of organizations that are allowed to create channels (consortium)
            - Enforce basic access control for channels, restricting who can read from and write data to, and configure them
            - Configuration transactions are processed by the orderers
        c. Orderers and the Transaction Flow
            - Phase One: Proposal
                - A client sends a transaction proposal to endorsing peers that will invoke a smart contract to produce a proposed ledger update and then endores the results
            - Phase Two: Ordering
                - Ordering Service node receives transactions containing endorsed transaction proposal responses
                - Ordering Service creates blocks of transactions
                - Number of transactions depends on channel configuration parameters BatchSize and BatchTimeout
                - Once a transaction has been written to a block, its position is immutably assured
            - Phase Three: Validation and Commit
                - Orderer distributes blocks to all peers connected to it, cascaded to other peers using gossip protocol
                - Each peer validates distributed blocks independently
        d. Ordering Service Implementations
            - Solo
                - Only a single ordering node
                - Not fault tolerant
            - Raft
                - Crash Fault Tolerant ordering service
                - Leader and follower model
                - Concepts
                    - Log Entry
                    - Consenter set
                    - Finite-State Machine
                    - Quoroum
                    - Leader
                    - Follower
                - Three States
                    - Follower, can accept log entries or cast votes for a leader
                    - Candidate, request votes from other nodes for leader
                    - Leader, candidate receives a quorum
            - Apache Kafka
                - Crash Fault Tolerant ordering service
                - Leader and follower model
     11. Private Data
        a. What is Private Data?
            - Allows a defined subset of organizations on a channel the ability to endorse, commit, or query private data without having to create a separate channel
        b. What is a Private Data Collection?
            - Actual Private Data
                - Data sent peer-to-peer via gossip protocol
                - Stored in a private database on the peers of authorized orgs
            - Hash of that Data
                - Endorsed, ordered, and written to the ledgers of every peer on the channel
                - Serves as evidence of the transaction
            - When
                - Use a channel when entire transactions and ledger must be kept confidential
                - Use a collection when transactions and ledgers must be shared amomg a set of orgs, but only when a subset of those orgs should hvae acces to some or all of the data within a transaction
        c. Transaction Flow
            - Process
                - Client application submits a proposal request to invoke a chaincode private data function
                - Endorsing peers simulate the transaction and store the private data in a transient data store
                - Endoring peers sends the proposal response back to the client, no private data, just hashes
                - Client application submits the transaction to the ordering service, with hashes
                - Transactions get included in blocks as normal
                - Authorized peers use the collection policy to determine if they are authorized to have access to the private data
                - If authorized, they check local transient data store to determine if tehy have recieved the private data.
                - If not, they will attempt to pull the private data from an authorized peer
                - Peers validate and move private data into their copy of private state database and private writeset storage
                - Private data is then deleted from the transient data store
