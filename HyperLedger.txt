HyperLedger Fundamentals
    1. Hyperledger
        a. What is it?
            -Hyperledger is an Umbrella project of open source Blockchain and related tools started in Dec. 2015 by the Linux Foundation.
            - Version 1.0 released on July 11th, 2017
        b. Structure of re-usable tools
            - DLT/Frameworks
                - Hyperledger Sawtooth
                - Hyperledger Iroha
                - Hyperledger Fabric*
                - Hyperledger Burrow
            -  Tools
                - Hyperledger Cello
                - Hyperledger Composer*
                - Hyperledger Explorer
                - Hyperledger Quilt
        c. Hyperledger Fabric
            - Set of infrastructure and application building blocks
            - Practices & Guidelines for creating BC apps
        d. Summary
            - Hyperledger = BC incubator
            - Hyperledger Fabric = distributed ledger technology framework initiative
            - Hyperledger Composer = tool for creating business applications on DL
    2. Foundation
        a. Distributed Ledger Technology
            - Decentralized system for exchange of value
            - Asset, represents value that is tangible or intangible
            - Each node maintains a copy of the DL
            - Every time a transaction occurs. all DL are updated
            - Challenges
                - Maintaining consistency
                - Privacy
                - Standardization, Interperability, and Scalability
            - Hyperledger Fabric is a DLT framework addressing the above challenges
    3. Hyperledger Fabric
        a. What is Hyperledger Fabric
            - DLT for the Business
            - Public would be Ethereum or Bitcoin
        b. Important Characteristics
            - Permissioned Network
                - Restricts who can access and do what on the network
                - Requires known participants, access control lists
                - Transaction validations
            - Confidential Transactions
                - Participants in control of visibility of transactions
                - Private channels can be created with limited visibility
            - No cryptocurrency
                - No need to incentivise the network for validations
                - Participants decide the who and how of validation
            - Programmablle
                - Chaincode = Smart Contract
                - Chaincode automates the business process
        c. Assets
            - Anything of value
            - Transactions = change of assets state
        d. Chaincode
            - Describes the structure of the asset, JSON or binary
            - Contains transaction business logic
        e. Ledger
            - Tracks all of the asset transactions
            - All participants have a copy of the ledger
        f. Permissioned Network
            - All identities are know
            - Membership Service Provider (1 or more)
                - Creating valid participants with certificates
            - Member, legally separate entities
            - Identities are managed by way of certificates, Certification Authority X509
                - Certificate private key is used for signing transaction
                - Even infrastructure components are assigned identity
            - Members can manage identitie within their organization
        g. Nodes and Channels
            - Node connect to other nodes to form the BC network, they use protocol to communicate
            - Node = communication entity of blockchain, require certificates
            - Participan w/Certficate -> Use App -> On Node w/Certificate
            - Types of Nodes
                - Client, application use for initiating transaction
                - Peers, keep ledgers in sync across network
                - Ordered, responsible for distribution of transaction
            - Channels, peers connect to receive transactions, independent ledger
    4. Hyperledger Fabric Composer
        a. What is composer?
            - Open development tool set to create and manage business network applications
            - Accelerates developents of application on blockchain technology
        b. Benefits
            - reduced time to value
            - hides complexity
            - business modeling
            - written in JavaScript.
        c. Toolset
            - Devs/Architects
            - Operations
            - Administrators
            - Business analysts
        d. Development Process
            - Composer Modeling Language Object-Oriented, to define domain model for the buisness network
            - Developer takes Business Network model and codes Transaction specification
            - Administrator deploys Business Network Application to execution runtime
            - Operator uses tools to maintain healt of application
        e. Execution Runtimes
            - Hyperledger Fabric 1x
            - Playground
                - Used by business domain experts and developers
                - Used to create business network model
                - used for simulated testing
            - Embedded
                - Developers can code the business network application and deploy in Node simulator
                - Used for Test Driven Development and Unit Testing
    5. Development Machine
        a. Git, Python 2.7.x, Node v.x, Yeoman
        b. npm install -g composer-cli
            - composer -v
        c. node-gyp issues
        d. npm install -g composer-rest-server
            - composer-rest-server -v
        e. npm install -g generator-hyperledger-composer
            - yo --generators
        f. Docker
            - docker -v
            - env | grep DOCKER_
        g. Docker Toolbox
        h. Native vs. Virtual Machine, for setting up Hyperledger Dev Environment
            - Native, everything needed is installed
            - Virtual Machine, everything exists on virtual machine
        i. Virtual Machine Set-up
            - Virtualization, software simulation of physical hardware made possible with Hypervisor
            - Oracle Virtual Box or Vagrant
                - Review Lessons Hyperledger 12 - 27
        j. Topology - Overview
            - Configured for a single organization
            - Four Docker Containers
                - Certification Authority
                - Orderer - SOLO
                - Peer -> CouchDB
                - Config = Crypto and Config
            - Config
                - Channel and Genesis Block
                - configtxgen tool
            - Crypto
                - Certificates and Keys
                - cryptogen
            - Utiity Scripts
                - Launch
                    - ./startFabric.sh
                    - kills and removes running containers
                    - re-deployment is necessary
                - Shutdown
                    - ./stopFabric.sh
                    - kills and removes running containers
                - Suspend/Restart
                    - ./startFabric.sh
                    - ./fabricUtil.sh stop
                    - ./fabric.Util.sh start
    6. Hyperledger Fabric Under the Hood
        a. Ledger Implementation
            - Transaction Log, tracks transactions againsts assets
                - immutable
                - Can create and retrieve, cannot update or delete
                - levelDB, embedded within peer
                    - queryable and efficient implementation for creation of data
                    - Peers write transactions to the leveldb
            - State Database, current state of assets
                - Can create, read, update, and delete
                - Chain Code Execution
                    - Creates transactions in the transaction log
                    - Can create CRUD changes in the state data
                - Key/Value Pairs
                    - Key = name
                    - Value = binary blobs of JSON
                - Update, new version is created for key/value pair
                - State data is managed in levelDB
                    - key - all version of values
                - Access to data is restricted to owner Chaincode
            - LevelDB
                - supports simple queries, executed against peer
            - Business Need Cases
                - State DB can be filled by LevelDB or CouchDB
        b. Peer Nodes
            - Peers need Ledger and certificates
            - Peers receive requests from Client
            - Keeps ledger in sync in the network
            - Anchor
                - Receives block from Orderers
                - Anchor Peer updates other Peers
                - Anchor set up at channel level
                - An Anchor is discoverable
            - Highly Scalable Architecture
            - Endorser
                - Clients send requests to Endorser Peer
                - Validates the transaction
                - Simulates the chaincode, executes it
                - Rejects or Endorses Transaction 
                - Objective is to protect the network
            - Checks
                - Are endorsements valid?
                - Are there enough endorsments?
                - Are they coming from the right sources?
                    - Success or Failure
        c. Client Nodes
            - Initiates transations
                - Creates a transaction request and sends to one or more Endorser Peer nodes
                - Chain code defines endorsement policy
            - Endorsement Policy 
                - Specifices which Peer is Endorser
                - Criteria for transaction validation
                    - Number of endorsments or % needed
                    - Supports Logical Operators
                - OPTIONAL
                - Specified at the time of the deplyoyment of chaincode
        d. Orderer Nodes/Ordering Service
            - Communication Channel
            - Responsible for consistent ledger state and order of transactions
            - Creates the blocks and guarantees atomic delivery
            - Implemented with Message Oriented Middleware
                - SOLO, Single Node for Development, Single Point of Failure
                - Kafka, Clustering for high throughput, scalability, & fault tolerance
            - Client broadcasts the endorsed transaction using Orderer broadcast service
                - Orderer sends block to Anchor Peers
        e. Membership Service Providers & Certificates of Authority
            - 
    7. Case Study: ACME Air
    8. Composer Modeling
    9. Composer SDK/API
    10. Develop a Network App
    11. Resources
        a. hyperledger.org
        b. yeoman.org
        c. curl.haxx.se
        d. www.cygwin.com
