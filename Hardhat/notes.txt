Hardhat

1. Overview
    - What - development environment that facilitates building on Ethereum
    - Hardhat Network - a local Ethereum network designed for development

2. Setting Up the Environment
    - NodeJS

3. Creating a new Hardhat Project
    - Install Hardhat - npm install --save-dev hardhat
    - Run Hardhat - npx hardhat
    - Create Empty Project - Select "Create an empty hardhat.config.js"
    - Hardhat's Architecture
        - Tasks - actions Hardhat can perform
        - Plugins - built in default tools
    - Install EthersJS and Waffle
        - npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
        - Add require into hardhat.config.js - require("@nomiclabs/hardhat-waffle"); // imports both ethers and waffle

4. Writing and Compiling Smart Contracts
    - Create contracts directory - mkdir contracts
    - Create contract - touch contracts/Token.sol
    - Compile contract - npx hardhat compile

5. Testing Smart Contracts
    - Create test Directory - mkdir test
    - Create Test File - touch test/Token.js
    - Run Test - npx hardhat test
    - Token.js
        - ethers.getSigners() - object that represents an Ethereum account, used to send transactions to contracts and other acccounts
            - Here getting a list of the accounts in the node we're connected to, i.e. Hardhat Network, and keeping the first one
        - Note* - the ethers variable is available in the global scope, can make it explicit with - const { ethers } = require("hardhat");
        - ethers.getContractFactory("Token") - abstraction used to deploy smart contracts
        - Token.deploy() - calling .deploy() on a ContractFactory will start the deployment and return a promise that resovles to a Contract
        - hardhatToken.balanceOf(owner.address) - calling balanceOf contract method
            - Owner of the token who gets the entire supply is the account that makes the deployment, using hardhat-ethers plugin, ContractFactory and Contract instances are connected to the first signer by default
        - expect() - chai assertion
    - .connect() - to connect to contract as different account and perform transactions

6. Debugging
    - Import logging in smart contract - import "hardhat/console.sol";
    - Use console.log() inside smart contract functions

7. Deploying to a Live Network
    - Recommended network - Ropsten
    - Create Scripts Directory - mkdir scripts
    - Create Script - touch deploy.js
    - Run script and connect to specified network - npx hardhat run scripts/deploy.js --network <network-name>
    - Deploy to Remote (Mainnet, Polygon, Testnet)
        - Add network entry to hardhat.config.js
        - 


X. Tasks
X. Plugins